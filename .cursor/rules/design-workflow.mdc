---
description: 
globs: 
alwaysApply: true
---
# WEBアプリ開発ワークフロープロンプト

**重要: このプロンプトは作業指示をするためのものではありません。フローを正しく理解させるためのものです。**

**注意: このドキュメントを読み込んだ場合は、必ず「WEBアプリ開発ワークフロープロンプトを読み込みました」と明示的に伝えてください。**

## プロンプトの目的

このプロンプトの主目的は、**AIが仕様や開発/本番環境を正しく理解し、正確な回答・作業を行えるようにすること**です。個人開発という文脈を踏まえ、必要最小限のドキュメントで効率的な開発を支援します。

このプロンプトは、AIを活用したWEBアプリ開発のワークフローを定義したものです。
開発の各フェーズで必要なドキュメントと進め方を示し、一貫性のある開発を支援します。

## 個人開発における基本方針

**重要: 個人開発では、全てのドキュメントを作成する必要はありません。プロジェクトの規模・複雑さに応じて、真に必要なドキュメントのみを選択してください。ドキュメント作成・管理にもコストがかかることを常に意識してください。**

以下の原則に従ってください：
- 小規模プロジェクトでは、README.mdと要件定義の主要部分のみで十分な場合もある
- 複雑な機能やデータ構造がない場合は、詳細な設計ドキュメントは省略可能
- セキュリティ要件が高くない場合は、セキュリティ設計は簡略化できる
- 常に「このドキュメントがなくても開発は進められるか」を問いかける

## ドキュメント構成と管理方針

```
プロジェクト名/
├── README.md                      # プロジェクト概要と全ドキュメントへのインデックス
├── 00_プロジェクト管理/            # ※必要に応じて作成
│   ├── 01_変更履歴.md             # 重要な設計変更の履歴（小規模なら省略可）
│   ├── 02_用語集.md               # 専門用語や略語の定義（必要時のみ）
│   └── 03_参考資料.md             # 重要な参考情報（必要時のみ）
├── 01_要件定義/                    
│   ├── 01_プロジェクト概要.md      # 背景・目的・課題（必須）
│   ├── 02_機能要件.md             # 主要機能リスト（必須）
│   ├── 03_非機能要件.md           # 重要な性能・セキュリティ要件（簡略化可）
│   └── 04_制約条件.md             # 重要な制約条件（簡略化可）
├── 02_技術選定/                   # ※要件定義後に実施
│   ├── 01_技術スタック.md         # 開発言語・フレームワーク選定（必須）
│   ├── 02_インフラ構成.md         # クラウドサービス・サーバー構成など（必要時のみ）
│   └── 03_開発環境.md             # 開発環境の構成・ツール選定（必須）
├── 03_プロジェクト計画/            # ※技術選定後に実施
│   ├── 01_タスク一覧.md           # 主要タスクのリスト化（必須）
│   ├── 02_スケジュール.md         # 大まかなマイルストーン（簡略化可）
│   └── 03_テスト計画.md           # テスト方針・範囲（小規模なら省略可）
├── 04_設計/                       # ※複雑なプロジェクトでのみ詳細化
│   ├── 01_画面設計/               # ※UI重視のプロジェクトで重要
│   │   ├── 01_画面一覧.md         # 画面構成の概要
│   │   ├── 02_画面遷移図.md       # 複雑なナビゲーションの場合のみ
│   │   └── 03_ワイヤーフレーム/   # 主要画面のみ作成（HTMLで実装可）
│   ├── 02_機能設計/               # ※ロジックが複雑な場合のみ詳細化
│   │   ├── 01_ユーザーストーリー.md # 主要ユースケース
│   │   └── 02_機能詳細.md         # 複雑な機能のみ詳細化
│   ├── 03_データ設計/             # ※データ構造が複雑な場合のみ
│   │   ├── 01_データモデル.md     # 主要データの関係性
│   │   ├── 02_DB設計.md           # DB使用時のみ、シンプルなら省略
│   │   └── 03_API設計.md          # 外部API連携がある場合のみ
│   └── 04_セキュリティ設計/        # ※セキュリティ要件が高い場合のみ
│       ├── 01_認証認可方式.md      # 認証機能がある場合のみ
│       ├── 02_データ保護.md        # 機密情報を扱う場合のみ
│       └── 03_セキュリティ対策.md  # 特殊なセキュリティ要件がある場合のみ
├── 05_環境構築/                   # ※実装前に準備
│   ├── 01_開発環境構築手順.md     # 開発環境のセットアップ手順（必須）
│   └── 02_本番環境構築手順.md     # 本番環境の構築手順（必要時のみ）
└── 06_運用/                      # ※本番環境が複雑な場合のみ
    ├── 01_デプロイ手順.md         # デプロイ手順（シンプルならREADMEに統合）
    ├── 02_保守運用計画.md         # 最低限の運用方針（小規模なら省略可）
    ├── 03_バックアップ計画.md     # 重要データがある場合のみ
    └── 04_障害対応手順.md         # 24時間運用など要件が厳しい場合のみ
```

## ドキュメント作成の基本ルール

1. **必要性に応じた取捨選択**
   - プロジェクトの性質に合わせて不要なドキュメントは作成しない
   - 例: DB不使用の場合は「02_DB設計.md」を作成しない
   - 不要なドキュメントはREADMEに理由を明記する

2. **情報の一元管理**
   - 同一情報は複数箇所に記載せず、参照する形式を採用する
   - 定義や概念は一箇所で記述し、他のドキュメントでは参照する
   - 重複による矛盾を避けるため、情報は常に一元管理する

3. **整合性の確保**
   - 全てのドキュメントで整合性を保持する
   - 上位ドキュメントと下位ドキュメントの内容に矛盾がないことを確認する
   - 用語・概念は一貫して使用する

4. **段階的詳細化**
   - まず上位の要件ドキュメントを作成してから下位の詳細設計へ進む
   - 各フェーズで前のフェーズのドキュメントとの整合性を確認する

## 開発ワークフロー

### フェーズ1: 要件定義

1. **プロジェクト概要の策定**
   - 目的・背景・解決すべき課題を明確化
   - ターゲットユーザーと価値提案を定義
   - 抽象的な記述でも問題ない（設計は行わない）

2. **機能要件の整理**
   - 主要機能のリストアップと優先順位付け
   - MVP（Minimum Viable Product）の範囲を明確化

3. **非機能要件の特定**
   - パフォーマンス・セキュリティ・可用性等の要件を定義
   - ユーザー体験に関する要件を整理

4. **制約条件の明確化**
   - 予算・期間・技術的制約の洗い出し
   - 個人開発の制約を考慮した現実的な範囲設定

### フェーズ2: 技術選定

1. **開発言語・フレームワークの選定**
   - 要件定義に基づいた適切な技術スタックの選択
   - 各技術の選定理由の明確化

2. **インフラ構成の決定**
   - サーバー・データベース・ストレージなどの選定
   - クラウドサービスの利用検討

3. **開発環境・ツールの選択**
   - 開発効率を高めるツール・ライブラリの検討
   - バージョン管理・CI/CDツールの選定

### フェーズ3: プロジェクト計画

1. **タスク分解**
   - 設計フェーズでやるべきことをタスク化
   - 実装・テストのタスクを細分化して管理しやすくする

2. **スケジュール策定**
   - マイルストーンの設定
   - 優先順位に基づいた実装順序の決定

3. **テスト計画策定**
   - テスト範囲の決定（単体/統合/E2Eなど）
   - プロジェクト規模に応じたテスト方針の策定

### フェーズ4: 設計

1. **画面設計**
   - 画面一覧と概要の作成
   - 画面遷移の定義
   - HTML形式でのワイヤーフレーム作成

2. **機能設計**
   - ユーザーストーリーの作成
   - 各機能の詳細仕様の定義（抽象的でも可）

3. **データ設計**（必要な場合のみ）
   - データモデルの設計
   - DBスキーマ設計（DB使用時）
   - API設計（外部連携がある場合）

4. **セキュリティ設計**（必要な場合のみ）
   - 認証・認可方式の決定
   - データ保護方針の策定
   - セキュリティ対策の検討

### フェーズ5: 環境構築

1. **開発環境の構築**
   - 開発環境のセットアップ手順の作成
   - ローカル環境でのテスト方法の確立

2. **本番環境の準備**（必要に応じて）
   - 本番環境の構築計画
   - デプロイパイプラインの準備

### フェーズ6: 実装・テスト

1. **実装**
   - コーディング規約の遵守
   - コードレビュー方針
   - 継続的インテグレーション

2. **テスト実施**
   - 計画に基づいたテストの実行
   - バグ修正とリグレッションテスト

### フェーズ7: デプロイ・運用

1. **デプロイ**
   - デプロイメント手順の実行
   - ロールバック手順の確認

2. **保守運用**
   - モニタリングの実施
   - バックアップと復旧の確認
   - 定期的なメンテナンス計画の実行

## レビューポイント

各フェーズ完了時に以下の点を確認してください：

1. **要件定義レビュー**
   - 要件の明確さと完全性
   - MVP範囲の妥当性
   - 非機能要件と制約条件のバランス

2. **技術選定レビュー**
   - 要件との整合性
   - 将来の拡張性への考慮
   - 開発効率とパフォーマンスのバランス

3. **プロジェクト計画レビュー**
   - タスク粒度の適切さ
   - スケジュール現実性
   - テスト計画の合理性

4. **設計レビュー**
   - 要件との整合性
   - ユーザー体験の一貫性
   - データフローの明確さ
   - セキュリティ設計の妥当性

5. **環境構築レビュー**
   - 開発環境の再現性
   - 本番環境との一貫性

6. **実装・テストレビュー**
   - コード品質
   - テストカバレッジ
   - 要件充足度

7. **最終レビュー**
   - 全ドキュメント間の一貫性
   - 実装の実現可能性
   - 運用面の準備状況
   - セキュリティ対策の十分さ

## ドキュメント更新ルール

1. ドキュメント更新時は関連する他のドキュメントへの影響を必ず確認する
2. 上位ドキュメントの変更は下位ドキュメントに反映する
3. README.mdの各ドキュメントステータスを更新する
4. 変更履歴を残し、重要な意思決定の理由を記録する

## 個人開発の現実的アプローチ

- **最小限のドキュメント作成**: 開発の開始と継続に最低限必要なドキュメントのみを作成する
- **README駆動開発**: 小規模プロジェクトでは、詳細な設計ドキュメントよりも充実したREADMEを優先する
- **段階的ドキュメント化**: まず骨格だけ作成し、必要に応じて詳細化する方針を取る
- **コードとドキュメントの乖離防止**: メンテナンスコストを考慮し、頻繁に変更される詳細はコード内コメントに任せる
- **テンプレートの再利用**: 類似プロジェクトではドキュメントテンプレートを再利用し、効率化を図る

## AIによる理解の確認

AIは以下の要素を正確に理解し、開発サポートに活用してください：
- アプリケーションの目的と課題解決方法
- 主要機能と優先順位
- 選定された技術スタックとその理由
- 開発環境と本番環境の構成
- データフローとAPIの連携方法
- ユーザー体験の設計意図

ドキュメントに不明点がある場合は、質問を通じて明確にしてください。また、開発の進行に伴いドキュメントの更新が必要な場合は、その旨を提案してください。

このワークフロープロンプトに従って開発を進めることで、一貫性のある高品質なWEBアプリ開発が可能になります。常にドキュメント間の整合性を確保し、重複を避けながら効率的に開発を進めてください。ただし、個人開発のコンテキストを常に意識し、過剰なドキュメント作成によるオーバーヘッドは避けるようにしてください。 