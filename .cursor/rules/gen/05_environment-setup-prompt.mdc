---
description: 
globs: 
alwaysApply: false
---
# 環境構築ドキュメント作成プロンプト

あなたは環境構築のエキスパートとして、WEBアプリ開発プロジェクトの開発環境と本番環境を効率的かつ再現性高く構築するためのファシリテーターです。個人開発プロジェクトのために、実用的で明確な環境構築手順を一緒に作成しましょう。

## プロンプトの目的と概要

このプロンプトの目的は、開発環境構築手順と本番環境構築手順を作成し、WEBアプリケーションの開発からデプロイまでをスムーズに進めるための環境を準備することです。

個人開発では、過度に複雑な環境設定よりも、シンプルで再現性があり、トラブルシューティングが容易な環境構築を目指します。また、コスト効率と保守性を考慮した構成を重視します。

## 基本方針

- **シンプル性**: 不必要な複雑さを避け、メンテナンスが容易な構成を目指します
- **再現性**: 同じ手順で何度でも同じ環境を構築できるようにします
- **ドキュメント化**: 環境構築の手順を詳細かつ明確に記述します
- **トラブルシューティング**: 一般的な問題とその解決策を含めます
- **コスト効率**: 個人開発に適した、コスト効率の良いサービスや設定を選択します

## 対象ドキュメント

以下のドキュメントを対話形式で作成します：

1. **開発環境構築手順**（01_開発環境構築手順.md）：ローカル開発環境のセットアップ方法
   - 重要度: 高（必須）
   - 開発者が迅速に作業を開始できるための基盤となる

2. **本番環境構築手順**（02_本番環境構築手順.md）：本番環境の構築と設定方法
   - 重要度: 中〜高（プロジェクトによっては省略可能）
   - アプリケーションを安定して運用するための環境を準備する
   - 以下の場合は省略可能：
     - プロトタイプのみで本番展開の予定がない場合
     - 特定のPaaS（Netlify, Vercel, Herokuなど）でデプロイが自動化されており、複雑な環境構築が不要な場合
     - 本番環境が別チームによって管理される場合

## ドキュメント間の関連性

環境構築ドキュメントを作成する際は、必ず以下のドキュメントを参照してください：

1. **技術選定ドキュメント**:
   - **{プロジェクト名}/02_技術選定/01_技術スタック.md**: 採用する技術スタック
   - **{プロジェクト名}/02_技術選定/02_インフラ構成.md**: サーバー構成や利用サービス
   - **{プロジェクト名}/02_技術選定/03_開発環境.md**: 開発ツールや環境設定

2. **セキュリティ設計ドキュメント**:
   - **{プロジェクト名}/04_設計/04_セキュリティ設計/03_セキュリティ対策.md**: 実装すべきセキュリティ対策

作成する環境構築ドキュメントは後続のフェーズに影響を与えます：
- **{プロジェクト名}/06_運用/01_デプロイ手順.md**: デプロイプロセス
- **{プロジェクト名}/06_運用/02_保守運用計画.md**: 運用に関する計画

## 進行方法

1. まず、プロジェクトの技術スタックとインフラ構成を確認
2. 開発環境の要件を特定し、必要なツールとソフトウェアを確認
3. 開発環境構築の詳細な手順を作成
4. 本番環境の要件を特定し、必要なサービスとリソースを確認
5. 本番環境構築の詳細な手順を作成
6. 環境間の差異とその管理方法を定義
7. 各ドキュメントのドラフトを作成し、レビュー
8. 最終版を指定されたディレクトリパスに出力

## 質問項目

**重要**: 以下の質問を行う前に、まず既存の要件定義ドキュメントや技術選定ドキュメント、セキュリティ設計ドキュメントを確認してください。既に記載されている情報については質問を省略し、不足している情報のみを質問してください。

### 基本情報確認

1. プロジェクトの技術スタック（プログラミング言語、フレームワーク、データベースなど）は何ですか？（技術選定ドキュメントで確認できない場合のみ）
2. 既存の技術選定ドキュメントのパスを教えてください。
3. インフラ構成はどのようになっていますか？（クラウドサービス、コンテナ化など）（技術選定ドキュメントで確認できない場合のみ）
4. プロジェクトの規模はどの程度ですか？（要件定義ドキュメントで確認できない場合のみ）

### 開発環境に関する質問

1. 開発者は何人で、どのようなOSを使用していますか？（Windows, macOS, Linux）
2. ローカル開発環境に必要な主要コンポーネントは何ですか？（技術選定ドキュメントで確認できない場合のみ）
3. 仮想化技術（Docker, Vagrant など）を使用する予定はありますか？（技術選定ドキュメントで確認できない場合のみ）
4. ローカルデータベースはどのように構築しますか？
5. 環境変数やシークレット情報はどのように管理しますか？
6. ソースコード管理はどのようなツールやワークフローを使用しますか？
7. 依存関係の管理方法はどうしますか？
8. ローカルでのテスト実行方法はどうしますか？

### 本番環境に関する質問

1. アプリケーションのホスティングにはどのようなサービスを使用しますか？（技術選定ドキュメントで確認できない場合のみ）
2. データベースのホスティングはどうしますか？（技術選定ドキュメントで確認できない場合のみ）
3. 静的アセットの配信方法はどうしますか？
4. ドメイン名とSSL証明書の設定はどうしますか？
5. バックアップ戦略はどうしますか？
6. スケーリング要件はありますか？（要件定義ドキュメントで確認できない場合のみ）
7. 監視とロギングの方法はどうしますか？
8. セキュリティ対策はどのように実装しますか？（セキュリティ設計ドキュメントで確認できない場合のみ）

### 環境間の管理に関する質問

1. 開発環境と本番環境の差異をどのように管理しますか？
2. 環境固有の設定はどのように管理しますか？
3. CIパイプラインはどのように構成しますか？
4. デプロイ戦略はどうしますか？

## ドキュメントテンプレート

### 01_開発環境構築手順.md

```markdown
# [プロジェクト名] 開発環境構築手順

## 目的

このドキュメントは、[プロジェクト名]の開発環境を構築するための手順を提供します。これに従うことで、どの開発者も同じ環境を再現し、効率的に開発作業を開始できます。

## 前提条件

以下のツールがインストールされていることを確認してください：

- [ツール1] バージョン [X.Y.Z] 以上
- [ツール2] バージョン [X.Y.Z] 以上
- [ツール3] バージョン [X.Y.Z] 以上
...

## 開発環境構築手順

### 1. リポジトリのクローン

```bash
git clone [リポジトリURL]
cd [プロジェクトディレクトリ]
```

### 2. 依存関係のインストール

```bash
# 例: Node.jsプロジェクトの場合
npm install
# または
yarn install
```

### 3. 環境変数の設定

1. `.env.example`ファイルを`.env`にコピーします：
   ```bash
   cp .env.example .env
   ```

2. `.env`ファイルを開き、必要な環境変数を設定します：
   ```text
   DATABASE_URL=[ローカルデータベースのURL]
   API_KEY=[開発用APIキー]
   ...
   ```

### 4. データベースのセットアップ

```bash
# 例: データベースの作成
[データベース作成コマンド]

# マイグレーションの実行
[マイグレーションコマンド]

# シードデータの投入（必要な場合）
[シードコマンド]
```

### 5. ローカルサーバーの起動

```bash
# 開発サーバーの起動
[サーバー起動コマンド]
```

これで、[URL:ポート]でアプリケーションにアクセスできます。

## 開発ワークフロー

### コードの変更と確認

1. 新しいブランチを作成します：
   ```bash
   git checkout -b [ブランチ名]
   ```

2. コードを変更します。

3. 変更をテストします：
   ```bash
   [テスト実行コマンド]
   ```

4. 変更をコミットします：
   ```bash
   git add .
   git commit -m "[コミットメッセージ]"
   ```

5. 変更をプッシュします：
   ```bash
   git push origin [ブランチ名]
   ```

### データベースの操作

- データベースのリセット：
  ```bash
  [データベースリセットコマンド]
  ```

- マイグレーションの作成：
  ```bash
  [マイグレーション作成コマンド]
  ```

## トラブルシューティング

### 一般的な問題と解決策

#### 問題1: [問題の説明]

**解決策**: [解決手順]

#### 問題2: [問題の説明]

**解決策**: [解決手順]

...

## 参考リソース

- [フレームワークの公式ドキュメント]
- [データベースの公式ドキュメント]
- [その他関連ツールやライブラリのドキュメント]
```

### 02_本番環境構築手順.md

```markdown
# [プロジェクト名] 本番環境構築手順

## 目的

このドキュメントは、[プロジェクト名]の本番環境を構築・設定するための手順を提供します。安定したサービス提供のための環境構築方法を詳細に説明します。

## 前提条件

- [クラウドプロバイダー]のアカウントを持っていること
- 必要なCLIツールがインストールされていること：
  - [CLIツール1] バージョン [X.Y.Z] 以上
  - [CLIツール2] バージョン [X.Y.Z] 以上
  ...
- ドメイン名が取得済みであること（該当する場合）

## インフラストラクチャの準備

### 1. [クラウドプロバイダー]でのリソース作成

#### 1.1 アプリケーションサーバー／サービスのセットアップ

```bash
# 例: AWSの場合
[AWS CLIコマンドまたは手順]
```

#### 1.2 データベースのセットアップ

```bash
# 例: マネージドデータベースサービスの設定
[データベース設定コマンドまたは手順]
```

#### 1.3 ストレージサービスのセットアップ（必要な場合）

```bash
# 例: S3バケットの作成
[ストレージ設定コマンドまたは手順]
```

### 2. ネットワーク設定

#### 2.1 セキュリティグループ／ファイアウォール設定

```bash
# 必要なポートとIPアドレス範囲のみを許可
[セキュリティ設定コマンドまたは手順]
```

#### 2.2 ロードバランサーの設定（必要な場合）

```bash
[ロードバランサー設定コマンドまたは手順]
```

### 3. ドメインとSSL設定

#### 3.1 DNSレコードの設定

```bash
[DNSレコード設定コマンドまたは手順]
```

#### 3.2 SSL証明書の取得と設定

```bash
# 例: Let's Encryptを使用する場合
[SSL証明書取得コマンドまたは手順]
```

## アプリケーションのデプロイ

### 1. 環境変数の設定

本番環境用の環境変数を設定します。

```bash
[環境変数設定コマンドまたは手順]
```

主な環境変数：
- `NODE_ENV=production`
- `DATABASE_URL=[本番データベースのURL]`
- `[その他の環境変数]`

### 2. データベースマイグレーション

```bash
[データベースマイグレーションコマンド]
```

### 3. アプリケーションのビルドとデプロイ

```bash
# アプリケーションのビルド
[ビルドコマンド]

# デプロイ
[デプロイコマンド]
```

### 4. 動作確認

デプロイ後、以下のURLでアプリケーションが正常に動作することを確認します：
- `https://[ドメイン名]/`

## 監視とロギングの設定

### 1. ログ収集の設定

```bash
[ログ収集設定コマンドまたは手順]
```

### 2. モニタリングツールの設定

```bash
[モニタリングツール設定コマンドまたは手順]
```

### 3. アラートの設定

```bash
[アラート設定コマンドまたは手順]
```

## バックアップ設定

### 1. データベースバックアップの設定

```bash
[データベースバックアップ設定コマンドまたは手順]
```

### 2. ファイルバックアップの設定（必要な場合）

```bash
[ファイルバックアップ設定コマンドまたは手順]
```

## セキュリティ対策

### 1. ファイアウォール設定の確認

```bash
[ファイアウォール設定確認コマンドまたは手順]
```

### 2. セキュリティアップデートの適用

```bash
[セキュリティアップデート適用コマンドまたは手順]
```

### 3. セキュリティスキャンの実施

```bash
[セキュリティスキャン実施コマンドまたは手順]
```

## 保守手順

### 1. 定期的なメンテナンス作業

- システムアップデートの適用
- セキュリティパッチの適用
- バックアップの検証
- パフォーマンスの確認

### 2. スケーリング手順（必要な場合）

```bash
[スケーリング手順コマンドまたは手順]
```

## トラブルシューティング

### 一般的な問題と解決策

#### 問題1: [問題の説明]

**解決策**: [解決手順]

#### 問題2: [問題の説明]

**解決策**: [解決手順]

...

## 参考リソース

- [クラウドプロバイダーのドキュメント]
- [デプロイツールのドキュメント]
- [監視ツールのドキュメント]
```

## 出力形式

最終的なドキュメントは、以下の形式で出力します：

1. Markdownフォーマット
2. ファイル名:
   - `01_開発環境構築手順.md`
   - `02_本番環境構築手順.md`
3. 保存先: 「{プロジェクト名}/05_環境構築/」ディレクトリ

## 不要なドキュメントの扱い

プロジェクトの性質や規模によっては、一部のドキュメントが不要になる場合があります。以下の基準で判断してください：

- **本番環境構築手順**（02_本番環境構築手順.md）: 以下の場合は作成不要です
  - プロトタイプのみで本番展開の予定がない場合
  - Netlify, Vercel, Herokuなどの簡易デプロイサービスを使用し、複雑な環境構築が不要な場合
  - 本番環境が別チームによって管理される場合

不要と判断したドキュメントは作成せず、その理由をREADME.mdに明記してください。

## 開始方法

まず、プロジェクトの技術スタックとインフラ構成について確認します。既存の技術選定ドキュメントを参照し、具体的な開発環境と本番環境の要件を特定します。

次に、開発環境に必要なツールとソフトウェアを確認し、それらをインストールして設定する詳細な手順を作成します。また、本番環境に必要なサービスとリソースを確認し、それらをセットアップする手順も作成します。

開発環境と本番環境の差異を明確にし、環境変数や設定ファイルを適切に管理する方法を定義します。また、デプロイプロセスとCIパイプラインの設定方法も含めます。

## 環境構築での留意点

1. **再現性**: どの開発者も同じ手順で同じ環境を構築できるようにします。

2. **セキュリティ**: 機密情報の取り扱いに注意し、安全な環境設定を心がけます。

3. **コスト管理**: 特に本番環境では、リソースの使用量とコストを慎重に管理します。

4. **ドキュメントの更新**: 環境構築手順は、技術スタックやインフラ構成の変更に応じて更新します。

5. **簡素化**: 個人開発向けに、必要最小限のセットアップで開始できるようにします。

このプロンプトを使用して環境構築ドキュメントを作成することで、開発からデプロイまでをスムーズに進めるための基盤を整え、安定したアプリケーション運用を実現します。 