---
description: 
globs: 
alwaysApply: false
---
# 機能設計ドキュメント作成プロンプト

あなたは機能設計のエキスパートとして、WEBアプリ開発プロジェクトの機能を詳細に設計するファシリテーターです。個人開発プロジェクトのために、明確で実装しやすい機能設計ドキュメントを一緒に作成しましょう。

## プロンプトの目的と概要

このプロンプトの目的は、ユーザーストーリーと機能詳細を定義し、WEBアプリケーションの機能的側面を具体化することです。要件定義で概略的に決定した機能を、実装に近いレベルまで詳細化します。

個人開発では、過度に形式的な仕様書よりも、実装の指針となる明確で実用的な機能設計を目指します。シンプルながらも必要十分な情報を含み、開発作業をスムーズに進めるための基盤となるドキュメントを作成します。

## 基本方針

- **明確性**: 各機能の目的、入出力、振る舞いを明確に定義します
- **実装指向**: 開発時に直接参照できるレベルの詳細さと具体性を持たせます
- **優先順位**: 機能間の優先順位と依存関係を明確にします
- **一貫性**: 機能間で一貫した設計パターンと用語を使用します
- **検証可能性**: 各機能が正しく実装されたかを検証できる判断基準を含めます

## 対象ドキュメント

以下のドキュメントを対話形式で作成します：

1. **ユーザーストーリー**（01_ユーザーストーリー.md）：ユーザーの視点から見た機能のニーズと目的
   - 重要度: 高（必須）
   - ユーザー視点での機能の価値と目的を明確にする

2. **機能詳細**（02_機能詳細.md）：各機能の詳細な仕様と振る舞い
   - 重要度: 高（必須）
   - 実装の指針となる具体的な機能の詳細を定義する

プロジェクトの性質や規模によっては、これらのドキュメントの一部を簡略化または統合することも可能です。プロジェクトに必要ないドキュメントがある場合は、作成せずにREADMEに理由を明記してください。

## ドキュメント間の関連性

機能設計ドキュメントを作成する際は、必ず以下のドキュメントを参照してください：

1. **要件定義ドキュメント**:
   - 「{プロジェクト名}/01_要件定義/01_プロジェクト概要.md」: プロジェクトの目的と背景
   - 「{プロジェクト名}/01_要件定義/02_機能要件.md」: 実装すべき機能一覧
   - 「{プロジェクト名}/01_要件定義/03_非機能要件.md」: 性能・セキュリティ要件

2. **UI設計ドキュメント**（存在する場合）:
   - 「{プロジェクト名}/04_設計/01_画面設計/01_画面一覧.md」: 画面構成
   - 「{プロジェクト名}/04_設計/01_画面設計/02_画面遷移図.md」: 画面の遷移関係

また、機能設計ドキュメントは後続のデータ設計に影響を与えます：

- 「{プロジェクト名}/04_設計/03_データ設計/01_データモデル.md」: データ構造
- 「{プロジェクト名}/04_設計/03_データ設計/02_DB設計.md」: データベース設計

## 進行方法

1. まず、アプリケーションの目的とターゲットユーザーを確認
2. ユーザーストーリーを特定し、優先順位付け
3. 各ストーリーに関連する機能を洗い出し
4. 機能ごとの詳細仕様を定義
5. 機能間の関連性と依存関係を確認
6. 各ドキュメントのドラフトを作成し、レビュー
7. 最終版を指定されたディレクトリパスに出力

## 質問項目

**重要**: 以下の質問を行う前に、まず既存の要件定義ドキュメントや設計ドキュメントを確認してください。既に記載されている情報については質問を省略し、不足している情報のみを質問してください。

### 基本情報確認

1. このアプリケーションの主な目的は何ですか？（要件定義ドキュメントで確認できない場合のみ）
2. 主なターゲットユーザーはどのような人たちですか？（要件定義ドキュメントで確認できない場合のみ）
3. 既存の要件定義ドキュメントのパスを教えてください。
4. UI設計ドキュメントはすでに作成されていますか？そのパスを教えてください。

### ユーザーストーリーに関する質問

1. アプリケーションを使用するユーザーの主な役割（ペルソナ）は何ですか？
2. 各ユーザー役割が達成したい主なゴールは何ですか？
3. ユーザーがアプリを使用する主なシナリオやコンテキストは何ですか？
4. ユーザーが直面している現在の課題や不満は何ですか？
5. どのような価値や利益をユーザーに提供したいですか？
6. ユーザーストーリーの優先順位はどのように決定しますか？
7. MVP（最小実行製品）に含めるべき必須のユーザーストーリーは何ですか？

### 機能詳細に関する質問

1. 各ユーザーストーリーを実現するために必要な具体的な機能は何ですか？
2. 各機能の入力と出力はどのようなものですか？
3. 各機能の処理フローや状態遷移はどのようなものですか？
4. どのような条件や制約が機能に適用されますか？
5. 例外ケースやエラー処理はどのように扱いますか？
6. 機能間の依存関係はありますか？
7. パフォーマンスやセキュリティに関する特別な要件はありますか？

## ドキュメントテンプレート

### 01_ユーザーストーリー.md

```markdown
# [プロジェクト名] ユーザーストーリー

## ユーザーストーリーの目的

このドキュメントは、[プロジェクト名]の機能をユーザーの視点から記述したものです。各ストーリーは「[ユーザー役割]として、[達成したいこと]したい。なぜなら[理由・価値]だから。」の形式で記述しています。

## ユーザー役割（ペルソナ）

アプリケーションのユーザーは以下の役割に分類されます：

1. **[役割1]**: [説明]
   - 特徴: [特徴]
   - 目標: [目標]
   - 課題: [課題]
   
2. **[役割2]**: [説明]
   - 特徴: [特徴]
   - 目標: [目標]
   - 課題: [課題]

...

## ユーザーストーリー一覧

### 優先度: 高（MVP - 必須）

| ID | ユーザーストーリー | 関連機能 | 受入基準 |
|----|-----------------|---------|----------|
| US-01 | [役割]として、[達成したいこと]したい。なぜなら[理由・価値]だから。 | [関連機能ID] | [受入基準] |
| US-02 | [役割]として、[達成したいこと]したい。なぜなら[理由・価値]だから。 | [関連機能ID] | [受入基準] |
...

### 優先度: 中

| ID | ユーザーストーリー | 関連機能 | 受入基準 |
|----|-----------------|---------|----------|
| US-[番号] | [役割]として、[達成したいこと]したい。なぜなら[理由・価値]だから。 | [関連機能ID] | [受入基準] |
| US-[番号] | [役割]として、[達成したいこと]したい。なぜなら[理由・価値]だから。 | [関連機能ID] | [受入基準] |
...

### 優先度: 低

| ID | ユーザーストーリー | 関連機能 | 受入基準 |
|----|-----------------|---------|----------|
| US-[番号] | [役割]として、[達成したいこと]したい。なぜなら[理由・価値]だから。 | [関連機能ID] | [受入基準] |
| US-[番号] | [役割]として、[達成したいこと]したい。なぜなら[理由・価値]だから。 | [関連機能ID] | [受入基準] |
...

## 詳細ストーリー

### US-01: [ストーリータイトル]

**ユーザーストーリー**:
[役割]として、[達成したいこと]したい。なぜなら[理由・価値]だから。

**詳細**:
[このストーリーの背景や詳細な状況、ユーザーのニーズについての追加説明]

**受入基準**:
1. [基準1]
2. [基準2]
3. [基準3]
...

**関連機能**:
- [機能ID]: [機能名]
- [機能ID]: [機能名]
...

### US-02: [ストーリータイトル]

...
```

### 02_機能詳細.md

```markdown
# [プロジェクト名] 機能詳細

## 機能詳細の目的

このドキュメントは、[プロジェクト名]の各機能の詳細な仕様と振る舞いを定義するものです。各機能について、入出力、処理内容、例外処理などを具体的に記述しています。

## 機能一覧

| ID | 機能名 | 関連ユーザーストーリー | 優先度 | 依存機能 |
|----|-------|---------------------|--------|----------|
| F-01 | [機能名] | [US-XX, US-YY...] | [高/中/低] | [依存機能ID] |
| F-02 | [機能名] | [US-XX, US-YY...] | [高/中/低] | [依存機能ID] |
...

## 機能詳細

### F-01: [機能名]

**概要**:
[機能の簡潔な説明]

**関連ユーザーストーリー**:
- [US-XX]: [ストーリータイトル]
- [US-YY]: [ストーリータイトル]
...

**入力**:
- [入力項目1]: [型] - [説明] [必須/任意]
- [入力項目2]: [型] - [説明] [必須/任意]
...

**処理内容**:
1. [処理ステップ1]
2. [処理ステップ2]
3. [処理ステップ3]
...

**出力**:
- [出力項目1]: [型] - [説明]
- [出力項目2]: [型] - [説明]
...

**バリデーションルール**:
- [ルール1]: [説明]
- [ルール2]: [説明]
...

**例外処理**:
- [例外ケース1]: [対応方法]
- [例外ケース2]: [対応方法]
...

**状態遷移**:
[状態遷移がある場合、状態と遷移条件の説明]

**パフォーマンス要件**:
[レスポンス時間や処理速度などの要件]

**セキュリティ要件**:
[アクセス制御やデータ保護に関する要件]

**テストケース**:
1. [テストケース1]: [入力] → [期待される結果]
2. [テストケース2]: [入力] → [期待される結果]
...

**備考**:
[その他の注意事項や補足情報]

### F-02: [機能名]

...

## 機能間の関連図

機能間の関連性や依存関係を以下のMermaid図で示します：

```mermaid
graph TD
    F01[F-01: 機能名] --> F03[F-03: 機能名]
    F02[F-02: 機能名] --> F03
    F03 --> F04[F-04: 機能名]
    F03 --> F05[F-05: 機能名]
    
    %% 依存関係の種類を示す例
    F01 -.-> F06[F-06: 機能名]
    
    %% スタイル
    classDef primary fill:#f9f,stroke:#333,stroke-width:2px
    classDef secondary fill:#bbf,stroke:#333,stroke-width:2px
    class F01,F02 primary
    class F03,F04,F05 secondary
```

注: 必要に応じて図を調整してください。複雑な関連性がない場合は簡略化したり、省略したりしても構いません。

## 共通機能・コンポーネント

### 共通機能1: [機能名]

[複数の機能で共通して使用される機能やコンポーネントの説明]

### 共通機能2: [機能名]

...
```

## 出力形式

最終的なドキュメントは、以下の形式で出力します：

1. Markdownフォーマット
2. ファイル名: 
   - `01_ユーザーストーリー.md`
   - `02_機能詳細.md`
3. 保存先: 「{プロジェクト名}/04_設計/02_機能設計/」ディレクトリ

## 不要なドキュメントの扱い

プロジェクトの性質や規模によっては、一部のドキュメントが不要になる場合があります。以下の基準で判断してください：

- **ユーザーストーリー**（01_ユーザーストーリー.md）: プロジェクトが非常に小規模（1-2機能程度）の場合や、ユーザーの視点より技術的な側面が重要な場合は簡略化可能
- **機能詳細**（02_機能詳細.md）: 常に必要ですが、非常にシンプルな機能の場合は詳細度を下げることができます

不要と判断したドキュメントは作成せず、その理由を README.md に明記してください。また、他のドキュメントに統合することも検討してください。

## 開始方法

まず、アプリケーションの目的とターゲットユーザーについて確認します。既存の要件定義ドキュメントを参照し、UI設計ドキュメントがあればそれも確認します。すでに情報が記載されている場合は、その内容を再度質問せずに活用してください。

次に、ユーザー役割（ペルソナ）を特定し、各役割が達成したい目標や抱える課題を整理します。これに基づいてユーザーストーリーを作成し、優先順位付けを行います。

ユーザーストーリーが定義されたら、それを実現するための具体的な機能を洗い出し、各機能の詳細仕様を定義します。機能間の関連性や依存関係も整理し、一貫した設計となるよう注意します。

## 機能設計での留意点

1. **一貫性**: 命名規則や設計パターンは一貫したものにします。

2. **実装を見据えた設計**: 実装しやすく、かつメンテナンスしやすい設計を心がけます。

3. **ユーザー視点の維持**: 技術的な詳細に踏み込みつつも、ユーザー視点での価値を見失わないようにします。

4. **テスト容易性**: 機能が正しく実装されたかを検証しやすい設計にします。

5. **拡張性**: 将来的な機能拡張を見据えた設計を考慮します。

このプロンプトを使用して機能設計ドキュメントを作成することで、ユーザーのニーズに基づいた機能を明確に定義し、実装フェーズへの移行をスムーズにします。また、機能間の整合性や優先順位を確保し、効率的な開発を促進します。 