---
description: 
globs: 
alwaysApply: false
---
# セキュリティ設計ドキュメント作成プロンプト

あなたはセキュリティ設計のエキスパートとして、WEBアプリ開発プロジェクトのセキュリティ対策を設計するファシリテーターです。個人開発プロジェクトのために、実用的かつ効果的なセキュリティ設計ドキュメントを一緒に作成しましょう。

## プロンプトの目的と概要

このプロンプトの目的は、WEBアプリケーションの認証認可方式、データ保護、セキュリティ対策を定義し、安全なアプリケーションを構築するための指針を作成することです。セキュリティはアプリケーション開発において非常に重要な側面であり、初期段階から適切に設計する必要があります。

個人開発では、セキュリティの専門家がいないことが多いため、実装可能で効果的な対策に焦点を当て、リソースの制約を考慮した現実的なアプローチを取ります。既存のセキュリティフレームワークやライブラリを活用し、セキュリティのベストプラクティスに従いながらも、過度に複雑な仕組みは避けます。

## 基本方針

- **多層防御**: 単一の対策に依存せず、複数のセキュリティ層を設ける
- **最小権限の原則**: ユーザーやプロセスには必要最小限の権限のみを付与する
- **デフォルトで安全**: 明示的に許可されない限り、アクセスや操作は拒否する
- **既存のセキュリティソリューション活用**: 自前で実装するよりも、実績のあるライブラリやフレームワークを利用する
- **継続的な更新**: セキュリティ対策は定期的な見直しと更新を前提とする

## 対象ドキュメント

以下のドキュメントを対話形式で作成します：

1. **認証認可方式**（01_認証認可方式.md）：ユーザー認証と権限管理の仕組み
   - 重要度: 高（必須）
   - ユーザー認証機能がない場合は作成不要

2. **データ保護**（02_データ保護.md）：機密データの保護方法
   - 重要度: 高（必須）
   - 個人情報や機密情報の適切な保護方法を定義する
   - 機密データや個人情報を扱わない場合は簡略化可能

3. **セキュリティ対策**（03_セキュリティ対策.md）：一般的な脆弱性への対策
   - 重要度: 高（必須）
   - 一般的なセキュリティリスクへの対応方法を定義する
   - すべてのプロジェクトで必要

## ドキュメント間の関連性

セキュリティ設計ドキュメントを作成する際は、必ず以下のドキュメントを参照してください：

1. **要件定義ドキュメント**:
   - **{プロジェクト名}/01_要件定義/01_プロジェクト概要.md**: プロジェクトの目的と背景
   - **{プロジェクト名}/01_要件定義/02_機能要件.md**: 実装すべき機能一覧
   - **{プロジェクト名}/01_要件定義/03_非機能要件.md**: セキュリティに関する要件

2. **技術選定ドキュメント**:
   - **{プロジェクト名}/02_技術選定/01_技術スタック.md**: 採用する技術と認証方式など

3. **データ設計ドキュメント**:
   - **{プロジェクト名}/04_設計/03_データ設計/01_データモデル.md**: 保護すべきデータの種類と構造
   - **{プロジェクト名}/04_設計/03_データ設計/03_API設計.md**: API設計とセキュリティ

作成するセキュリティ設計ドキュメントは後続のフェーズに影響を与えます：
- **{プロジェクト名}/05_環境構築/01_開発環境構築手順.md**: セキュリティ関連の設定
- **{プロジェクト名}/05_環境構築/02_本番環境構築手順.md**: 本番環境のセキュリティ対策
- **実装コード**: 認証・認可ロジック、データ暗号化、セキュリティ対策の実装

## 進行方法

1. まず、アプリケーションの目的と扱うデータの種類・重要度を確認
2. セキュリティ要件を特定し、リスク評価を行う
3. 適切な認証・認可方式を選定し、詳細を定義
4. 機密データの特定と保護方法を検討
5. 一般的なセキュリティ脆弱性への対策を策定
6. 各ドキュメントのドラフトを作成し、相互の整合性を確認
7. 最終版を指定されたディレクトリパスに出力

## 質問項目

**重要**: 以下の質問を行う前に、まず既存の要件定義ドキュメントや技術選定ドキュメント、機能設計ドキュメント、データ設計ドキュメントを確認してください。既に記載されている情報については質問を省略し、不足している情報のみを質問してください。

### 基本情報確認

1. このアプリケーションの主な目的は何ですか？（要件定義ドキュメントで確認できない場合のみ）
2. どのような種類のデータを扱いますか？特に機密性の高いデータはありますか？（データモデル設計で確認できない場合のみ）
3. 主なユーザー層とアクセス権限の種類は何ですか？（機能設計ドキュメントで確認できない場合のみ）
4. 既存の要件定義ドキュメントや技術選定ドキュメントのパスを教えてください。
5. アプリケーションの規模と予想されるユーザー数はどの程度ですか？（要件定義ドキュメントで確認できない場合のみ）

### 認証認可方式に関する質問

1. どのような認証方式を採用しますか？（技術選定ドキュメントで確認できない場合のみ）
2. パスワードポリシー（複雑さ、有効期限など）はどのように設定しますか？
3. セッション管理はどのように行いますか？
4. 権限モデルはどのように設計しますか？（ロールベース、属性ベースなど）
5. 認証情報の保存方法はどうしますか？
6. パスワードリセット機能はどのように実装しますか？
7. アカウントロックアウト（ブルートフォース攻撃対策）の方針はどうしますか？

### データ保護に関する質問

1. どのデータを暗号化する必要がありますか？（データモデル設計で確認できない場合のみ）
2. データ暗号化の方法（アルゴリズム、鍵管理など）はどうしますか？
3. 保存データと転送中データの保護方法はそれぞれどうしますか？
4. バックアップデータの保護方法はどうしますか？
5. データの匿名化や仮名化の必要性はありますか？
6. 個人情報保護法などの法的要件はありますか？
7. データアクセスの監査ログはどのように取得・保管しますか？

### セキュリティ対策に関する質問

1. XSS（クロスサイトスクリプティング）対策はどうしますか？
2. CSRF（クロスサイトリクエストフォージェリ）対策はどうしますか？
3. SQLインジェクション対策はどうしますか？
4. セキュリティヘッダ（CSP、X-XSS-Protectionなど）の設定はどうしますか？
5. 入力検証とサニタイズの方針はどうしますか？
6. エラーメッセージの表示方針はどうしますか？
7. サードパーティライブラリの脆弱性管理はどうしますか？
8. セキュリティテストの方針はどうしますか？

## ドキュメントテンプレート

### 01_認証認可方式.md

```markdown
# [プロジェクト名] 認証認可方式

## 認証認可方式の目的

このドキュメントは、[プロジェクト名]のユーザー認証と権限管理の仕組みを定義します。誰がシステムにアクセスでき、どのような操作が許可されるかを制御する方法を詳細に記述します。

## 認証方式

### 認証メカニズム

**採用する認証方式**: [認証方式（ユーザー名/パスワード、OAuth、JWT等）]

**認証フロー**:
1. [認証ステップ1]
2. [認証ステップ2]
3. [認証ステップ3]
...

**多要素認証**:
[多要素認証の採用有無と、採用する場合の方法]

### パスワードポリシー

- **最小長**: [文字数]
- **複雑さ要件**: [大文字、小文字、数字、特殊文字等の要件]
- **有効期限**: [日数、または無期限]
- **履歴管理**: [過去のパスワード再利用制限]
- **初期パスワード**: [初期パスワードの扱い]

### セッション管理

- **セッション期間**: [期間]
- **アイドルタイムアウト**: [時間]
- **セッションの保存方法**: [サーバー側/クライアント側、使用する技術]
- **同時セッション**: [同一ユーザーの複数セッション許可/禁止]

### アカウントセキュリティ

- **ロックアウトポリシー**: [ログイン失敗回数と期間]
- **パスワードリセット方法**: [リセットフローの詳細]
- **アカウント復旧方法**: [アカウント復旧の手順]

## 認可方式

### 権限モデル

**採用する権限モデル**: [ロールベース（RBAC）、属性ベース（ABAC）等]

**定義済みロール**:

| ロール名 | 説明 | 権限 |
|---------|-----|------|
| [ロール名] | [説明] | [権限リスト] |
| [ロール名] | [説明] | [権限リスト] |
...

### アクセス制御マトリックス

| リソース | 操作 | 必要な権限/ロール |
|---------|------|----------------|
| [リソース] | [操作] | [権限/ロール] |
| [リソース] | [操作] | [権限/ロール] |
...

### 権限チェック方法

- **フロントエンド**: [UIレベルでの権限チェック方法]
- **バックエンド**: [APIやサーバーレベルでの権限チェック方法]
- **データレベル**: [データアクセス制御の方法]

## 認証情報の保存

- **パスワード保存**: [ハッシュアルゴリズム、ソルト等]
- **認証トークン**: [トークンの形式、保存場所等]
- **機密情報**: [APIキー等の保存方法]

## セキュリティログとモニタリング

- **ログ記録対象**: [ログインイベント、権限変更、失敗した認証試行等]
- **ログ形式**: [ログのフォーマット]
- **ログ保存期間**: [期間]
- **異常検知**: [不審なアクティビティの検知方法]

## 実装方針

- **使用するライブラリ/フレームワーク**: [認証認可に使用するライブラリやフレームワーク]
- **カスタム実装**: [必要なカスタム実装の詳細]

## セキュリティ考慮事項

- [認証認可に関連するセキュリティ上の考慮事項]
- [リスクと対策]
...

## 今後の拡張

[認証認可方式の将来的な拡張や改善の方向性]
```

### 02_データ保護.md

```markdown
# [プロジェクト名] データ保護

## データ保護の目的

このドキュメントは、[プロジェクト名]で扱う機密データの保護方法を定義します。保存データと転送中データの暗号化、バックアップの保護、データアクセスの制御と監査に関する方針を詳細に記述します。

## データ分類

アプリケーションで扱うデータは以下のように分類します：

### 高機密データ

[高機密データの定義と例]

保護要件：
- [保護要件1]
- [保護要件2]
...

### 機密データ

[機密データの定義と例]

保護要件：
- [保護要件1]
- [保護要件2]
...

### 一般データ

[一般データの定義と例]

保護要件：
- [保護要件1]
- [保護要件2]
...

## データ暗号化

### 保存データの暗号化

- **暗号化対象**: [暗号化するデータの種類]
- **暗号化アルゴリズム**: [使用するアルゴリズム]
- **鍵管理**: [暗号鍵の生成、保存、更新方法]
- **データベース暗号化**: [データベースレベルの暗号化方法]
- **ファイル暗号化**: [ファイルレベルの暗号化方法]

### 転送中データの暗号化

- **通信プロトコル**: [HTTPS等]
- **TLS設定**: [TLSバージョン、暗号スイート等]
- **証明書管理**: [証明書の取得、更新方法]
- **API通信**: [API通信の暗号化方法]

## データアクセス制御

- **最小権限の原則**: [データアクセスへの最小権限適用方法]
- **アクセスポリシー**: [各データ分類へのアクセス権限の定義]
- **データマスキング**: [機密データの部分的な隠蔽方法]

## 個人情報保護

- **収集する個人情報**: [収集する個人情報の種類]
- **利用目的**: [個人情報の利用目的]
- **保持期間**: [個人情報の保持期間]
- **削除方法**: [個人情報の削除ポリシー]
- **仮名化/匿名化**: [個人情報の仮名化・匿名化方法]
- **同意管理**: [ユーザー同意の取得・管理方法]

## バックアップと復元

- **バックアップ対象**: [バックアップするデータ]
- **バックアップ頻度**: [バックアップの頻度]
- **バックアップの暗号化**: [バックアップデータの暗号化方法]
- **保存場所**: [バックアップの保存場所]
- **復元手順**: [バックアップからの復元手順]
- **復元テスト**: [復元テストの頻度と方法]

## データ監査とログ

- **監査対象**: [監査ログを記録する操作]
- **ログ内容**: [記録する情報]
- **ログ保存**: [ログの保存期間と方法]
- **ログの保護**: [ログ自体の改ざん防止策]

## データ漏洩対応

- **検知方法**: [データ漏洩の検知方法]
- **対応手順**: [データ漏洩発生時の対応手順]
- **通知ポリシー**: [ユーザーへの通知基準と方法]

## 実装方針

- **使用するライブラリ/フレームワーク**: [データ保護に使用するライブラリやフレームワーク]
- **カスタム実装**: [必要なカスタム実装の詳細]

## 法的要件への対応

- **適用法令**: [適用される法令（個人情報保護法、GDPR等）]
- **コンプライアンス対応**: [法的要件への対応方法]

## セキュリティ考慮事項

- [データ保護に関連するセキュリティ上の考慮事項]
- [リスクと対策]
...
```

### 03_セキュリティ対策.md

```markdown
# [プロジェクト名] セキュリティ対策

## セキュリティ対策の目的

このドキュメントは、[プロジェクト名]で採用するセキュリティ対策を定義します。一般的なWebアプリケーションの脆弱性とその対策、セキュリティテスト、インシデント対応などについて詳細に記述します。

## 一般的な脆弱性対策

### インジェクション攻撃対策

#### SQLインジェクション

- **対策**: [パラメータ化クエリ、ORM使用等]
- **実装方法**: [具体的な実装方法]
- **検証方法**: [対策の有効性検証方法]

#### コマンドインジェクション

- **対策**: [入力検証、セーフな関数使用等]
- **実装方法**: [具体的な実装方法]
- **検証方法**: [対策の有効性検証方法]

### クロスサイトスクリプティング（XSS）対策

- **対策**: [出力エスケープ、CSP等]
- **実装方法**: [具体的な実装方法]
- **検証方法**: [対策の有効性検証方法]

### クロスサイトリクエストフォージェリ（CSRF）対策

- **対策**: [CSRFトークン、SameSiteクッキー等]
- **実装方法**: [具体的な実装方法]
- **検証方法**: [対策の有効性検証方法]

### セキュリティミスコンフィギュレーション対策

- **対策**: [セキュアな設定、不要なサービス無効化等]
- **実装方法**: [具体的な実装方法]
- **検証方法**: [対策の有効性検証方法]

### 機密情報の露出防止

- **対策**: [エラーメッセージの制限、機密情報の適切な保護等]
- **実装方法**: [具体的な実装方法]
- **検証方法**: [対策の有効性検証方法]

### アクセス制御の不備対策

- **対策**: [適切な認可チェック、最小権限の原則等]
- **実装方法**: [具体的な実装方法]
- **検証方法**: [対策の有効性検証方法]

### その他の脆弱性対策

- **XXE対策**: [対策と実装方法]
- **デシリアライゼーション脆弱性対策**: [対策と実装方法]
- **オープンリダイレクト対策**: [対策と実装方法]
- **クリックジャッキング対策**: [対策と実装方法]
...

## セキュリティヘッダ設定

| ヘッダ名 | 値 | 目的 |
|---------|-----|------|
| Content-Security-Policy | [値] | [目的] |
| X-XSS-Protection | [値] | [目的] |
| X-Frame-Options | [値] | [目的] |
| X-Content-Type-Options | [値] | [目的] |
| Strict-Transport-Security | [値] | [目的] |
...

## 入力検証とサニタイズ

- **検証対象**: [検証対象となる入力データ]
- **検証方法**: [サーバーサイド/クライアントサイド検証、正規表現等]
- **サニタイズ方法**: [HTML、SQL等のサニタイズ方法]
- **実装方針**: [使用するライブラリ、共通ユーティリティ等]

## 依存パッケージ管理

- **脆弱性チェック**: [依存パッケージの脆弱性チェック方法]
- **更新方針**: [パッケージの更新頻度とプロセス]
- **自動化**: [脆弱性スキャンや更新の自動化方法]

## デプロイメントセキュリティ

- **環境分離**: [開発/テスト/本番環境の分離方法]
- **秘密情報管理**: [APIキー、パスワード等の管理方法]
- **デプロイプロセス**: [セキュアなデプロイプロセス]

## セキュリティテスト

- **静的解析**: [静的コード解析ツールと使用方法]
- **動的解析**: [動的アプリケーションセキュリティテスト方法]
- **脆弱性スキャン**: [使用するスキャナーと頻度]
- **ペネトレーションテスト**: [実施時期と範囲]

## セキュリティインシデント対応

- **検知方法**: [セキュリティインシデントの検知方法]
- **対応手順**: [インシデント発生時の対応手順]
- **報告プロセス**: [インシデント報告の方法]
- **事後分析**: [インシデント後の分析と改善]

## セキュリティアップデート

- **更新頻度**: [セキュリティ対策の見直し頻度]
- **新規脆弱性対応**: [新たに発見された脆弱性への対応方法]

## 参考資料

- [OWASP Top 10](https://owasp.org/www-project-top-ten/)
- [その他の参考資料へのリンク]
```

## 出力形式

最終的なドキュメントは、以下の形式で出力します：

1. Markdownフォーマット
2. ファイル名: 
   - `01_認証認可方式.md`
   - `02_データ保護.md`
   - `03_セキュリティ対策.md`
3. 保存先: 「{プロジェクト名}/04_設計/04_セキュリティ設計/」ディレクトリ

## 不要なドキュメントの扱い

プロジェクトの性質や規模によっては、一部のドキュメントが不要になる場合があります。以下の基準で判断してください：

- **認証認可方式**（01_認証認可方式.md）: ユーザー認証機能がない場合は不要です
- **データ保護**（02_データ保護.md）: 機密データや個人情報を扱わない場合は簡略化可能です
- **セキュリティ対策**（03_セキュリティ対策.md）: すべてのプロジェクトで必要です

不要と判断したドキュメントは作成せず、その理由をREADME.mdに明記してください。

## 開始方法

まず、アプリケーションの目的と扱うデータの種類・重要度について確認します。既存の要件定義ドキュメントや技術選定ドキュメントを参照し、セキュリティ要件を把握します。

次に、アプリケーションのリスク評価を行い、保護すべき資産と想定される脅威を特定します。これに基づいて、適切な認証・認可方式、データ保護方法、一般的な脆弱性への対策を検討します。

実装に当たっては、既存のセキュリティライブラリやフレームワークを積極的に活用し、自前での実装によるリスクを最小化します。また、セキュリティテストの方針も策定し、設計段階から対策の有効性を確認できるようにします。

## セキュリティ設計での留意点

1. **セキュリティと利便性のバランス**: 過度に厳格なセキュリティ対策はユーザビリティを損なう可能性があるため、リスクに応じた適切なバランスを取ります。

2. **防御の深さ**: 単一の対策に依存せず、複数の層での防御を心がけます。

3. **フレームワークの活用**: セキュリティの専門家がいない個人開発では、実績のあるセキュリティフレームワークを活用し、リスクを軽減します。

4. **定期的な見直し**: セキュリティ対策は一度策定して終わりではなく、新たな脅威への対応のため定期的な見直しが必要です。

5. **セキュリティの可視化**: セキュリティ状態を監視し、問題を早期に検出できる仕組みを検討します。

このプロンプトを使用してセキュリティ設計ドキュメントを作成することで、基本的なセキュリティリスクに対応したアプリケーション開発が可能になります。セキュリティはアプリケーションの信頼性と持続性に直結する重要な要素であり、設計段階からの適切な考慮が必要です。 